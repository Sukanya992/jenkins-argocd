pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "sukanya996/agrocd"
        DOCKER_CREDENTIALS = credentials('docker-hub')
        ZONE = "us-central1-c"
        CLUSTER_NAME = "my-cluster"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS) {
                        docker.image(DOCKER_IMAGE).push()
                    }
                }
            }
        }
stage('GCP Login') {
            steps {
                withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                    # Authenticate with Google Cloud
                    echo "Using credentials from: $GOOGLE_APPLICATION_CREDENTIALS"
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    '''
                }
            }
        }
stage('Terraform Apply (Cluster)') {
            steps {
                script {
                    // Change to the directory containing the Terraform configuration files
                    dir('terraform') {
                        sh '''
                        terraform init
                        terraform plan
                        terraform apply --auto-approve
                        '''
                    }
                }
            }
        }
stage('Wait for Cluster Access') {
            steps {
                retry(3) {
                    sh '''
                    sleep 10
                    gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project plated-epigram-452709-h6
                    '''
                }
            }
        }
        stage('Install Argo CD') {
            steps {
                script {
                    sh 'kubectl create namespace argocd'
                    sh 'kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml'
                }
            }
        }
    }
}
