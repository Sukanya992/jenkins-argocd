pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "sukanya996/agrocd"
        DOCKER_CREDENTIALS = credentials('docker-hub')
        ZONE = "us-central1-c"
        CLUSTER_NAME = "my-cluster"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
        DEPLOY = "k8s/deploy.yaml"
        SVC = "k8s/svc.yaml"
        ARGOCD_APP_NAME = "argocd-deployment"  // Your Argo CD application name
    }
    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE, 'docker/')  // Build the Docker image
                }
            }
        }
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }
        stage('GCP Login') {
            steps {
                withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                    # Authenticate with Google Cloud
                    echo "Using credentials from: $GOOGLE_APPLICATION_CREDENTIALS"
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    '''
                }
            }
        }
        stage('Terraform Apply (Cluster)') {
            steps {
                script {
                    dir('terraform') {
                        sh '''
                        terraform init
                        terraform plan
                        terraform apply --auto-approve  
                        '''
                    }
                }
            }
        }
        stage('Wait for Cluster Access') {
            steps {
                retry(3) {
                    sh '''
                    sleep 10
                    gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project plated-epigram-452709-h6
                    '''
                }
            }
        }
        stage('Install Argo CD CLI') {
    steps {
        sh '''
        curl -sSL https://github.com/argoproj/argo-cd/releases/download/v2.4.8/argocd-linux-amd64 -o /tmp/argocd-linux-amd64
        chmod +x /tmp/argocd-linux-amd64
        mv /tmp/argocd-linux-amd64 /usr/bin/argocd   
        '''
    }
}



        stage('Install Argo CD') {
            steps {
                script {
                    sh 'kubectl create namespace argocd || echo "namespace already exists"'  
                    sh 'kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml'  
                    sh 'kubectl rollout status deployment/argocd-server -n argocd'  
                    sh 'kubectl patch svc argocd-server -n argocd -p \'{"spec": {"type": "LoadBalancer"}}\''  
                    sh 'kubectl -n argocd get secret argocd-initial-admin-secret -o "jsonpath={.data.password}" | base64 -d'  
                    sh 'kubectl get svc -n argocd' 
                }
            }
        }
        stage('Update Deployment Files') {
            steps {
                sh '''
                sed -i "s|image: .*|image: ${DOCKER_IMAGE}:${BUILD_NUMBER}|" $DEPLOY  
                '''
            }
        }
        stage('Sync Argo CD') {
            steps {
                script {
                    sh "argocd app sync ${ARGOCD_APP_NAME} "
                }
            }
        }
    }
}
