pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "sukanya996/agrocd"
        DOCKER_CREDENTIALS = credentials('docker-hub')
        ZONE = "us-central1-c"
        CLUSTER_NAME = "my-cluster"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key')
        DEPLOY = "k8s/deploy.yaml"
        SVC = "k8s/svc.yaml"
        ARGOCD_APP_NAME = "argocd-deployment"
    }
    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE, 'docker/')
                }
            }
        }
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub',
                                                  usernameVariable: 'DOCKER_USER',
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }
        stage('GCP Login') {
            steps {
                withCredentials([file(credentialsId: 'gcp-key', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    '''
                }
            }
        }
        stage('Terraform Apply (Cluster)') {
            steps {
                dir('terraform') {
                    sh '''
                    terraform init
                    terraform apply --auto-approve
                    '''
                }
            }
        }
        stage('Wait for Cluster Access') {
            steps {
                retry(3) {
                    sh '''
                    sleep 10
                    gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE --project plated-epigram-452709-h6
                    '''
                }
            }
        }
        stage('Install Argo CD') {
            steps {
                sh '''
                kubectl create namespace argocd || echo "Namespace exists"
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                kubectl rollout status deployment/argocd-server -n argocd
                kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
                '''
            }
        }
        
        stage('Update Deployment Files') {
            steps {
                sh '''
                sed -i "s|image: .*|image: ${DOCKER_IMAGE}:${BUILD_NUMBER}|" $DEPLOY
                '''
            }
        }
stage('Fetch Argo CD IP') {
            steps {
                sh '''
                kubectl get svc argocd-server -n argocd -o 'jsonpath={.status.loadBalancer.ingress[0].ip}'
                kubectl -n argocd get secret argocd-initial-admin-secret -o 'jsonpath={.data.password}' | base64 -d
                '''
            }
        }

    }
}
